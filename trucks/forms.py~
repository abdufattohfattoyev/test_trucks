import re
from django import forms
from django.core.exceptions import ValidationError
from .models import Truck, TruckHujjat
from django.contrib.auth.models import User


class MultiFileInput(forms.ClearableFileInput):
    allow_multiple_selected = True

    def __init__(self, attrs=None):
        if attrs is not None:
            attrs = attrs.copy()
            attrs['multiple'] = True
        else:
            attrs = {'multiple': True}
        super().__init__(attrs)

    def value_from_datadict(self, data, files, name):
        """Multiple file input uchun value extraction"""
        upload = files.get(name)
        if upload is None:
            return None
        if isinstance(upload, list):
            return upload
        return [upload] if upload else None


class TruckForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        user = kwargs.pop('user', None)
        # instance ni olish
        instance = kwargs.get('instance', None)
        super().__init__(*args, **kwargs)
        self.is_edit = instance is not None

        # Configure user field
        if user and not user.is_superuser:
            self.fields['user'].widget = forms.HiddenInput()
            self.fields['user'].required = False
            # Agar yangi obyekt bo'lsa, current user ni set qilish
            if not self.is_edit:
                self.fields['user'].initial = user
        else:
            self.fields['user'].queryset = User.objects.all()
            self.fields['user'].widget.attrs.update({
                'class': 'form-control',
                'placeholder': 'Foydalanuvchi tanlang'
            })

        # Apply styling to all fields
        for field_name, field in self.fields.items():
            if field_name != 'user' or (field_name == 'user' and user and user.is_superuser):
                field.widget.attrs.update({
                    'class': 'form-control',
                    'placeholder': f"{field.label} kiriting" if field.label else f"{field_name} kiriting"
                })

        # Set required fields
        required_fields = ['po_id', 'make', 'model', 'year', 'horsepower', 'price', 'company', 'location']
        for field_name in required_fields:
            if field_name in self.fields:
                self.fields[field_name].required = True
                self.fields[field_name].widget.attrs['required'] = 'required'

        # Configure specific fields
        if 'po_id' in self.fields:
            self.fields['po_id'].widget.attrs.update({
                'placeholder': 'PO ID kiriting (masalan, PO-12345)'
            })

        if 'year' in self.fields:
            self.fields['year'].widget.attrs.update({'min': 1900, 'max': 2100})

        if 'horsepower' in self.fields:
            self.fields['horsepower'].widget.attrs.update({'min': 0})

        if 'price' in self.fields:
            self.fields['price'].widget.attrs.update({'step': '0.01', 'min': 0})

        if 'seriya' in self.fields:
            self.fields['seriya'].widget.attrs.update({'maxlength': 50})

        if 'description' in self.fields:
            self.fields['description'].widget.attrs.update({
                'rows': 3,
                'style': 'resize: vertical;'
            })

        if 'image' in self.fields:
            self.fields['image'].widget.attrs.update({
                'class': 'form-control file-upload',
                'accept': 'image/*'
            })

        # Help texts
        help_texts = {
            'image': 'Ixtiyoriy - Tavsiya etilgan olcham: 800x600px',
            'seriya': 'Ixtiyoriy - Mashina seriya raqami',
            'po_id': 'PO ID kiriting',
            'year': '1900 va 2100 oraligida',
            'horsepower': 'Minimal 0 HP',
            'price': 'AQSh dollarida',
            'company': 'Kompaniya nomini kiriting',
            'location': 'Mashina joylashuvi'
        }

        for field_name, help_text in help_texts.items():
            if field_name in self.fields:
                self.fields[field_name].help_text = help_text

    class Meta:
        model = Truck
        fields = [
            'user', 'po_id', 'make', 'model', 'year', 'horsepower', 'price', 'company',
            'location', 'description', 'image', 'seriya'
        ]
        labels = {
            'user': 'Foydalanuvchi',
            'po_id': 'PO ID',
            'make': 'Marka',
            'model': 'Model',
            'year': 'Yil',
            'horsepower': 'Ot kuchi (HP)',
            'price': 'Narx ($)',
            'company': 'Kompaniya nomi',
            'location': 'Joylashuv',
            'image': 'Mashina rasmi',
            'description': 'Qoshimcha izohlar',
            'seriya': 'Seriya raqami'
        }

    def clean_po_id(self):
        po_id = self.cleaned_data.get('po_id')
        if not po_id:
            raise ValidationError("PO ID kiritilishi shart.")

        # Trim whitespace
        po_id = po_id.strip()

        # Add PO- prefix if not present
        if not po_id.startswith('PO-'):
            po_id = f"PO-{po_id}"

        # Validate format
        if not re.match(r'^PO-\d+$', po_id):
            raise ValidationError("PO ID 'PO-' bilan boshlanib, raqamlar bilan davom etishi kerak.")

        # Check uniqueness
        existing_trucks = Truck.objects.filter(po_id=po_id)
        if self.instance and self.instance.pk:
            existing_trucks = existing_trucks.exclude(pk=self.instance.pk)

        if existing_trucks.exists():
            raise ValidationError("Bu PO ID allaqachon band qilingan.")

        return po_id

    def clean_year(self):
        year = self.cleaned_data.get('year')
        if year and (year < 1900 or year > 2100):
            raise ValidationError('Yil 1900 va 2100 oralig\'ida bo\'lishi kerak.')
        return year

    def clean_horsepower(self):
        horsepower = self.cleaned_data.get('horsepower')
        if horsepower is not None and horsepower < 0:
            raise ValidationError('Ot kuchi manfiy bo\'lishi mumkin emas.')
        return horsepower

    def clean_price(self):
        price = self.cleaned_data.get('price')
        if price is not None and price < 0:
            raise ValidationError('Narx manfiy bo\'lishi mumkin emas.')
        return price

    def clean_make(self):
        make = self.cleaned_data.get('make')
        if make and len(make.strip()) < 2:
            raise ValidationError('Marka kamida 2 ta belgidan iborat bo\'lishi kerak.')
        return make.strip() if make else make

    def clean_model(self):
        model = self.cleaned_data.get('model')
        if model and len(model.strip()) < 2:
            raise ValidationError('Model kamida 2 ta belgidan iborat bo\'lishi kerak.')
        return model.strip() if model else model

    def clean_company(self):
        company = self.cleaned_data.get('company')
        if company and len(company.strip()) < 2:
            raise ValidationError('Kompaniya nomi kamida 2 ta belgidan iborat bo\'lishi kerak.')
        return company.strip() if company else company

    def clean_location(self):
        location = self.cleaned_data.get('location')
        if location and len(location.strip()) < 2:
            raise ValidationError('Joylashuv kamida 2 ta belgidan iborat bo\'lishi kerak.')
        return location.strip() if location else location

    def clean_seriya(self):
        seriya = self.cleaned_data.get('seriya')
        if seriya and len(seriya.strip()) < 2:
            raise ValidationError('Seriya raqami kamida 2 ta belgidan iborat bo\'lishi kerak.')
        return seriya.strip() if seriya else seriya

    def save(self, commit=True):
        instance = super().save(commit=False)

        # Agar user hidden field bo'lsa va initial value mavjud bo'lsa
        if 'user' in self.fields and isinstance(self.fields['user'].widget, forms.HiddenInput):
            if self.fields['user'].initial and not instance.user_id:
                instance.user_id = self.fields['user'].initial.id if hasattr(self.fields['user'].initial, 'id') else \
                self.fields['user'].initial

        if commit:
            instance.save()
        return instance


class TruckHujjatForm(forms.ModelForm):
    class Meta:
        model = TruckHujjat
        fields = ['hujjat']
        widgets = {
            'hujjat': MultiFileInput(attrs={
                'class': 'form-control',
                'accept': '.jpg,.jpeg,.png,.pdf,.doc,.docx',
                'multiple': True,
                'id': 'hujjat-input',
            }),
        }
        labels = {
            'hujjat': "Hujjat yoki rasm (JPG, PNG, PDF, DOC, DOCX, bir nechta fayl ruxsat etiladi)",
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['hujjat'].required = False

    def clean_hujjat(self):
        hujjatlar = self.cleaned_data.get('hujjat')

        if not hujjatlar:
            return hujjatlar

        # Agar list bo'lmasa, listga aylantirish
        if not isinstance(hujjatlar, list):
            hujjatlar = [hujjatlar]

        # Allowed extensions
        allowed_extensions = ['jpg', 'jpeg', 'png', 'pdf', 'doc', 'docx']
        max_file_size = 10 * 1024 * 1024  # 10MB

        for file in hujjatlar:
            if not file:
                continue

            # File size check
            if file.size > max_file_size:
                raise ValidationError(f"Fayl '{file.name}' hajmi 10MB dan kichik bo'lishi kerak!")

            # Extension check
            if '.' not in file.name:
                raise ValidationError(f"Fayl '{file.name}' kengaytmasi aniqlanmadi!")

            ext = file.name.split('.')[-1].lower()
            if ext not in allowed_extensions:
                raise ValidationError(
                    f"Fayl '{file.name}' qo'llab-quvvatlanmaydi! Faqat {', '.join(allowed_extensions).upper()} fayllari ruxsat etiladi!")

        return hujjatlar if len(hujjatlar) > 1 else hujjatlar[0] if hujjatlar else None
{% extends 'base.html' %}
{% block title %}Expense Details - Truck Sales{% endblock %}
{% block content %}
<div class="container-xl">
    <div class="page-header">
        <h1 class="page-title">Expense Details</h1>
        <a href="{% url 'chiqim_list' %}" class="btn btn-secondary">
            <i class="bi bi-arrow-left"></i> Back
        </a>
    </div>
    <div class="card-grid">
        <div class="card"><h3>Vehicle</h3><p class="value">{{ chiqim.truck.make }} {{ chiqim.truck.model|default:"No data" }}</p></div>
        <div class="card"><h3>Buyer</h3><p class="value">{{ chiqim.xaridor.ism_familiya|default:"No data" }}</p><p class="value">Phone: {{ chiqim.xaridor.telefon_raqam|default:"No phone" }}</p></div>
        <div class="card"><h3>Total Price</h3><p class="value">${{ chiqim.narx|floatformat:2 }}</p></div>
        <div class="card"><h3>Down Payment (Planned)</h3><p class="value">${{ chiqim.boshlangich_summa|floatformat:2 }}</p></div>
        <div class="card"><h3>Down Paid Amount</h3><p class="value">${{ total_boshlangich_paid|floatformat:2 }}</p></div>
        <div class="card"><h3>Down Remaining</h3><p class="value" id="initial-remaining">${{ boshlangich_qoldiq|floatformat:2 }}</p></div>
        <div class="card"><h3>Total Monthly Paid</h3><p class="value">${{ total_monthly_paid|floatformat:2 }}</p></div>
        <div class="card"><h3>Remaining Debt</h3><p class="value">${{ remaining_debt|floatformat:2 }}</p></div>
        <div class="card"><h3>Debt Percentage</h3><p class="value">{{ payment_schedule.0.debt_percentage|floatformat:2 }}%</p></div>
        <div class="card"><h3>Payment Term</h3><p class="value">{{ chiqim.bo_lib_tolov_muddat }} months</p></div>
        <div class="card"><h3>First Payment Date</h3><p class="value">{{ chiqim.tolov_sana|date:"Y-m-d" }}</p></div>
        <div class="card"><h3>Notes</h3><p class="value">{{ chiqim.izoh|default:"No notes" }}</p></div>
        {% if chiqim.hujjatlar %}<div class="card"><h3>Documents</h3><p class="value"><a href="{{ chiqim.hujjatlar.url }}" target="_blank" class="link">View Document</a></p></div>{% endif %}
    </div>
    <section class="payment-schedule-section mt-5">
        <h2 class="section-title">Payment Schedule</h2>
        <div class="filter-section">
            <input type="text" id="searchInput" class="search-input" placeholder="Search by month..." aria-label="Search payments by month">
            <select id="filterStatus" class="filter-select" aria-label="Filter payments by status">
                <option value="">Filter by status</option>
                <option value="paid">Paid</option>
                <option value="unpaid">Unpaid</option>
            </select>
        </div>
        {% if payment_schedule %}
        <div class="table-responsive">
            <table class="data-table">
                <thead><tr><th>Month</th><th>Date</th><th>Payment Amount</th><th>Paid Amount</th><th>Status</th><th>Days Left</th><th>Balance</th><th>Progress</th><th>Next Payment</th></tr></thead>
                <tbody id="paymentTableBody">
                    {% for payment in payment_schedule %}
                    <tr data-month="{{ payment.month }}" data-status="{% if payment.is_paid %}paid{% else %}unpaid{% endif %}">
                        <td>{{ payment.month }}</td>
                        <td>{{ payment.date|date:"Y-m-d" }}</td>
                        <td>${{ payment.amount|floatformat:2 }}</td>
                        <td>${{ payment.paid_amount|floatformat:2 }}</td>
                        <td><span class="status {% if payment.is_paid %}paid{% else %}unpaid{% endif %}">
                            {% if payment.is_paid %}Paid{% else %}Unpaid{% endif %}</span></td>
                        <td>{% if payment.days_left > 0 %}{{ payment.days_left }} days{% else %}Overdue{% endif %}</td>
                        <td>${{ payment.carryover|floatformat:2 }}</td>
                        <td><div class="progress-bar"><div class="progress" style="width: {{ payment.progress_percentage|floatformat:2 }}%;"></div></div><span class="progress-text">{{ payment.progress_percentage|floatformat:2 }}%</span></td>
                        <td>{% if not payment.is_paid and payment.pending_debt > 0 %}${{ payment.pending_debt|floatformat:2 }} due{% else %}-{% endif %}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        {% else %}
        <div class="empty-state"><i class="bi bi-exclamation-circle"></i><p>No payment schedule available.</p></div>
        {% endif %}
    </section>
    <section class="payment-history-section mt-5">
        <div class="page-header">
            <h2 class="section-title">Payment History</h2>
            <div class="action-buttons">
                <button class="btn-add btn-boshlangich" id="add-initial-payment-btn" style="display: {% if boshlangich_qoldiq <= 0 %}none{% else %}block{% endif %};" onclick="openAddBoshlangichPaymentForm({{ chiqim.id }})">
                    <i class="bi bi-wallet2"></i> Add Initial Payment
                </button>
                <button class="btn-add" onclick="openAddPaymentForm({{ chiqim.id }})">
                    <i class="bi bi-cash-coin"></i> Add Monthly Payment
                </button>
            </div>
        </div>
        {% if chiqim.boshlangich_tolovlar.exists or chiqim.tolovlar.exists %}
        <div class="table-responsive">
            <table class="data-table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Amount</th>
                        <th>Payment Type</th>
                        <th>Buyer</th>
                        <th>Type</th>
                        <th>Notes</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for tolov in chiqim.boshlangich_tolovlar.all %}
                    <tr data-id="{{ tolov.id }}" data-type="boshlangich">
                        <td>{{ tolov.sana|date:"Y-m-d" }}</td>
                        <td class="tolov-summa">${{ tolov.summa|floatformat:2 }}</td>
                        <td>{{ tolov.get_tolov_turi_display }}</td>
                        <td>{{ tolov.xaridor.ism_familiya }}</td>
                        <td>Initial Payment</td>
                        <td>{{ tolov.izoh|default:"No notes" }}</td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn-action btn-edit" onclick="openEditBoshlangichPaymentForm({{ tolov.id }})">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn-action btn-delete" onclick="openDeleteBoshlangichPaymentForm({{ tolov.id }})">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                    {% endfor %}
                    {% for tolov in chiqim.tolovlar.all %}
                    <tr data-id="{{ tolov.id }}" data-type="monthly">
                        <td>{{ tolov.sana|date:"Y-m-d" }}</td>
                        <td class="tolov-summa">${{ tolov.summa|floatformat:2 }}</td>
                        <td>{{ tolov.get_tolov_turi_display }}</td>
                        <td>{{ tolov.xaridor.ism_familiya }}</td>
                        <td>Monthly Payment</td>
                        <td>{{ tolov.izoh|default:"No notes" }}</td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn-action btn-edit" onclick="openEditPaymentForm({{ tolov.id }})">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn-action btn-delete" onclick="openDeletePaymentForm({{ tolov.id }})">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        {% else %}
        <div class="empty-state">
            <i class="bi bi-exclamation-circle"></i>
            <p>No payments available yet.</p>
        </div>
        {% endif %}
    </section>
    <div class="action-section mt-5">
        <div class="action-buttons">
            <button class="btn-action btn-edit" onclick="openEditChiqimForm({{ chiqim.id }})"><i class="bi bi-pencil"></i> Edit</button>
            <button class="btn-action btn-delete" onclick="openDeleteChiqimForm({{ chiqim.id }})"><i class="bi bi-trash"></i> Delete</button>
        </div>
    </div>
</div>
<div id="formSidebar" class="form-sidebar"></div>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput');
    const filterStatus = document.getElementById('filterStatus');
    const tableBody = document.getElementById('paymentTableBody');
    const addInitialButton = document.getElementById('add-initial-payment-btn');
    const initialRemaining = document.getElementById('initial-remaining');

    // Form handler storage to prevent multiple handlers
    const formHandlers = new Map();

    function filterTable() {
        const searchTerm = searchInput.value.toLowerCase().trim();
        const statusFilter = filterStatus.value;
        const rows = tableBody.querySelectorAll('tr');
        rows.forEach(row => {
            const month = row.dataset.month.toLowerCase();
            const status = row.dataset.status;
            const matchesSearch = month.includes(searchTerm);
            const matchesStatus = !statusFilter || status === statusFilter;
            row.style.display = matchesSearch && matchesStatus ? '' : 'none';
        });
    }

    if (searchInput) searchInput.addEventListener('input', filterTable);
    if (filterStatus) filterStatus.addEventListener('change', filterTable);

    function clearErrors() {
        document.querySelectorAll('.is-invalid, .invalid-feedback').forEach(el => {
            el.classList.remove('is-invalid');
            if (el.classList.contains('invalid-feedback')) el.remove();
        });
    }

    function getCookie(name) {
        let cookieValue = null;
        if (document.cookie && document.cookie !== '') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.substring(0, name.length + 1) === (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    }

    function showAlert(type, message, duration = 5000) {
        document.querySelectorAll('.custom-alert').forEach(alert => alert.remove());

        const alertDiv = document.createElement('div');
        alertDiv.className = `custom-alert alert alert-${type}`;
        alertDiv.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            padding: 1rem 1.5rem;
            border-radius: 0.5rem;
            max-width: 400px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            font-weight: 500;
            ${type === 'success' ?
                'background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb;' :
                'background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb;'
            }
        `;
        alertDiv.textContent = message;

        document.body.appendChild(alertDiv);

        setTimeout(() => {
            alertDiv.style.opacity = '0';
            alertDiv.style.transform = 'translateX(100%)';
            setTimeout(() => alertDiv.remove(), 300);
        }, duration);
    }

    function displayErrors(errors) {
        clearErrors();

        if (typeof errors === 'object' && errors !== null) {
            for (const [field, messages] of Object.entries(errors)) {
                const input = document.querySelector(`#id_${field}`);
                if (input && Array.isArray(messages)) {
                    input.classList.add('is-invalid');
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'invalid-feedback';
                    errorDiv.textContent = messages.join(', ');
                    input.parentNode.appendChild(errorDiv);
                } else if (Array.isArray(messages)) {
                    showAlert('danger', messages.join(', '));
                }
            }
        } else {
            showAlert('danger', 'An unknown error occurred');
        }
    }

    function setupFormHandler(formId, url, successMessage, callback = () => {}) {
        // Remove existing handler if any
        if (formHandlers.has(formId)) {
            const existingHandler = formHandlers.get(formId);
            const form = document.getElementById(formId);
            if (form && existingHandler) {
                form.removeEventListener('submit', existingHandler);
            }
        }

        const form = document.getElementById(formId);
        if (!form) {
            console.error(`Form ${formId} not found`);
            return;
        }

        const submitHandler = async (e) => {
            e.preventDefault();
            clearErrors();

            const formData = new FormData(form);
            const submitButton = form.querySelector('button[type="submit"]');

            if (submitButton) {
                submitButton.disabled = true;
                const originalText = submitButton.textContent;
                submitButton.textContent = 'Submitting...';
            }

            try {
                const csrfToken = getCookie('csrftoken');
                if (!csrfToken) {
                    throw new Error('CSRF token not found');
                }

                const response = await fetch(url, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-CSRFToken': csrfToken,
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    credentials: 'same-origin'
                });

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status} ${response.statusText}`);
                }

                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    throw new Error('Server did not return JSON response');
                }

                const data = await response.json();

                if (data.success) {
                    showAlert('success', successMessage);
                    closeFormSidebar();
                    if (typeof callback === 'function') {
                        callback(data);
                    }
                    if (data.reload) {
                        setTimeout(() => location.reload(), 1500);
                    }
                } else {
                    if (data.errors) {
                        displayErrors(data.errors);
                    } else if (data.error) {
                        showAlert('danger', data.error);
                    } else {
                        showAlert('danger', 'An unknown error occurred');
                    }
                }
            } catch (error) {
                console.error('Form submission error:', error);
                showAlert('danger', `Connection error: ${error.message}`);
            } finally {
                if (submitButton) {
                    submitButton.disabled = false;
                    submitButton.textContent = 'Save';
                }
            }
        };

        form.addEventListener('submit', submitHandler);
        formHandlers.set(formId, submitHandler);
    }

    function openFormSidebar(url, title) {
        const sidebar = document.getElementById('formSidebar');
        if (!sidebar) {
            console.error('FormSidebar element not found');
            return;
        }

        sidebar.innerHTML = `
            <div style="padding: 2rem; text-align: center;">
                <div style="margin-bottom: 1rem;">Loading...</div>
                <div style="width: 40px; height: 40px; border: 4px solid #f3f3f3; border-top: 4px solid #3498db; border-radius: 50%; animation: spin 2s linear infinite; margin: 0 auto;"></div>
            </div>
            <style>
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
            </style>
        `;
        sidebar.classList.add('active');

        return fetch(url, {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRFToken': getCookie('csrftoken')
            },
            credentials: 'same-origin'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Server error: ${response.status} ${response.statusText}`);
            }
            return response.text();
        })
        .then(html => {
            sidebar.innerHTML = html;

            const closeButton = document.createElement('button');
            closeButton.innerHTML = '×';
            closeButton.style.cssText = `
                position: absolute;
                top: 15px;
                right: 15px;
                background: none;
                border: none;
                font-size: 24px;
                cursor: pointer;
                color: #666;
                z-index: 1001;
            `;
            closeButton.onclick = closeFormSidebar;
            sidebar.insertBefore(closeButton, sidebar.firstChild);

            return sidebar;
        })
        .catch(error => {
            console.error('Error loading form:', error);
            sidebar.innerHTML = `
                <div style="padding: 2rem; text-align: center; color: #dc3545;">
                    <h4>Error!</h4>
                    <p>Failed to load form: ${error.message}</p>
                    <button onclick="closeFormSidebar()" style="padding: 0.5rem 1rem; background: #6c757d; color: white; border: none; border-radius: 4px;">Close</button>
                </div>
            `;
        });
    }

    function closeFormSidebar() {
        const sidebar = document.getElementById('formSidebar');
        if (sidebar) {
            sidebar.classList.remove('active');
            setTimeout(() => {
                sidebar.innerHTML = '';
            }, 300);
        }
    }

    window.closeFormSidebar = closeFormSidebar;

    window.openEditChiqimForm = (id) => {
        openFormSidebar(`/chiqim/edit/${id}/`, "Edit Expense")
            .then(() => {
                setupFormHandler('chiqimForm', `/chiqim/edit/${id}/`, "Expense updated successfully!");
            });
    };

    window.openDeleteChiqimForm = (id) => {
        openFormSidebar(`/chiqim/delete/${id}/`, "Delete Expense")
            .then(() => {
                setupFormHandler('chiqimDeleteForm', `/chiqim/delete/${id}/`, "Expense deleted successfully!");
            });
    };

    window.openAddPaymentForm = (chiqimId) => {
        openFormSidebar(`/chiqim/payment/add/${chiqimId}/`, "Add Monthly Payment")
            .then(() => {
                setupFormHandler('tolovForm', `/chiqim/payment/add/${chiqimId}/`, "Monthly payment added successfully!");
            });
    };

    window.openEditPaymentForm = (tolovId) => {
        openFormSidebar(`/chiqim/payment/edit/${tolovId}/`, "Edit Monthly Payment")
            .then(() => {
                setupFormHandler('tolovForm', `/chiqim/payment/edit/${tolovId}/`, "Monthly payment updated successfully!");
            });
    };

    window.openDeletePaymentForm = (tolovId) => {
        openFormSidebar(`/chiqim/payment/delete/${tolovId}/`, "Delete Monthly Payment")
            .then(() => {
                setupFormHandler('tolovDeleteForm', `/chiqim/payment/delete/${tolovId}/`, "Monthly payment deleted successfully!");
            });
    };

    window.openAddBoshlangichPaymentForm = (chiqimId) => {
        openFormSidebar(`/chiqim/boshlangich_payment/add/${chiqimId}/`, "Add Initial Payment")
            .then(() => {
                setupFormHandler('boshlangichTolovForm', `/chiqim/boshlangich_payment/add/${chiqimId}/`, "Initial payment added successfully!", (data) => {
                    if (data.success) {
                        if (initialRemaining) {
                            initialRemaining.textContent = `$${(data.boshlangich_qoldiq || 0).toFixed(2)}`;
                        }

                        if (addInitialButton) {
                            if (data.boshlangich_qoldiq <= 0) {
                                addInitialButton.style.display = 'none';
                            } else {
                                addInitialButton.style.display = 'block';
                            }
                        }
                    }
                });
            });
    };

    window.openEditBoshlangichPaymentForm = (tolovId) => {
        openFormSidebar(`/chiqim/boshlangich_payment/edit/${tolovId}/`, "Edit Initial Payment")
            .then(() => {
                setupFormHandler('boshlangichTolovForm', `/chiqim/boshlangich_payment/edit/${tolovId}/`, "Initial payment updated successfully!", (data) => {
                    if (data.success) {
                        if (initialRemaining) {
                            initialRemaining.textContent = `$${(data.boshlangich_qoldiq || 0).toFixed(2)}`;
                        }

                        if (addInitialButton) {
                            addInitialButton.style.display = data.boshlangich_qoldiq > 0 ? 'block' : 'none';
                        }

                        const row = document.querySelector(`tr[data-id="${tolovId}"][data-type="boshlangich"] .tolov-summa`);
                        if (row && data.tolov_summa) {
                            row.textContent = `$${data.tolov_summa.toFixed(2)}`;
                        }
                    }
                });
            });
    };

    window.openDeleteBoshlangichPaymentForm = (tolovId) => {
        openFormSidebar(`/chiqim/boshlangich_payment/delete/${tolovId}/`, "Delete Initial Payment")
            .then(() => {
                setupFormHandler('boshlangichTolovDeleteForm', `/chiqim/boshlangich_payment/delete/${tolovId}/`, "Initial payment deleted successfully!", (data) => {
                    if (data.success) {
                        if (initialRemaining) {
                            initialRemaining.textContent = `$${(data.boshlangich_qoldiq || 0).toFixed(2)}`;
                        }

                        if (addInitialButton && data.boshlangich_qoldiq > 0) {
                            addInitialButton.style.display = 'block';
                        }

                        const row = document.querySelector(`tr[data-id="${tolovId}"][data-type="boshlangich"]`);
                        if (row) {
                            row.remove();
                        }
                    }
                });
            });
    };

    document.addEventListener('click', (e) => {
        const sidebar = document.getElementById('formSidebar');
        if (sidebar && sidebar.classList.contains('active') && !sidebar.contains(e.target)) {
            const isButton = e.target.closest('button') && (
                e.target.closest('button').onclick ||
                e.target.closest('button').getAttribute('onclick')
            );
            if (!isButton) {
                closeFormSidebar();
            }
        }
    });
});
</script>
{% endblock %}

{% block extra_css %}
<style>
    :root {
        --primary: #4361ee;
        --secondary: #3f37c9;
        --accent: #4895ef;
        --danger: #f72585;
        --success: #4cc9f0;
        --dark: #212529;
        --light: #f8f9fa;
        --shadow-sm: 0 1px 3px rgba(0,0,0,0.12);
        --shadow-md: 0 4px 6px rgba(0,0,0,0.1);
        --radius-sm: 0.25rem;
        --radius-md: 0.5rem;
        --transition: all 0.3s ease;
    }
    .container-xl { max-width: 1400px; padding: 2rem 1rem; margin: 0 auto; }
    .page-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem; flex-wrap: wrap; gap: 1rem; }
    .page-title, .section-title { color: var(--dark); font-weight: 600; margin: 0; }
    .btn { border: none; padding: 0.75rem 1.5rem; border-radius: var(--radius-sm); font-weight: 500; transition: var(--transition); display: inline-flex; align-items: center; gap: 0.5rem; cursor: pointer; }
    .btn-secondary { background-color: #6c757d; color: white; }
    .btn-secondary:hover { background-color: #5a6268; box-shadow: var(--shadow-sm); }
    .btn-add, .btn-boshlangich { background-color: var(--primary); color: white; }
    .btn-add:hover, .btn-boshlangich:hover { background-color: var(--secondary); box-shadow: var(--shadow-sm); }
    .btn-action { padding: 0.5rem 1rem; font-size: 0.9rem; }
    .btn-edit { background-color: var(--success); color: white; }
    .btn-edit:hover { background-color: #3da8d6; }
    .btn-delete { background-color: var(--danger); color: white; }
    .btn-delete:hover { background-color: #d81e70; }
    .card-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1.5rem; margin-bottom: 2rem; }
    .card { background-color: var(--light); padding: 1.5rem; border-radius: var(--radius-md); box-shadow: var(--shadow-sm); }
    .card h3 { font-size: 1.1rem; font-weight: 600; color: var(--dark); margin: 0 0 0.5rem; }
    .card p.value { font-size: 1rem; color: var(--dark); margin: 0; }
    .link { color: var(--primary); text-decoration: none; }
    .link:hover { text-decoration: underline; }
    .table-responsive { overflow-x: auto; }
    .data-table { width: 100%; border-collapse: collapse; background-color: var(--light); }
    .data-table th, .data-table td { padding: 0.75rem; text-align: left; border-bottom: 1px solid #dee2e6; }
    .data-table th { background-color: #e9ecef; font-weight: 600; }
    .status.paid { color: #28a745; font-weight: 500; }
    .status.unpaid { color: var(--danger); font-weight: 500; }
    .progress-bar { background-color: #e9ecef; border-radius: var(--radius-sm); height: 10px; width: 100px; }
    .progress { background-color: var(--success); height: 100%; border-radius: var(--radius-sm); }
    .progress-text { margin-left: 0.5rem; font-size: 0.9rem; }
    .filter-section { display: flex; gap: 1rem; margin-bottom: 1rem; flex-wrap: wrap; }
    .search-input, .filter-select { padding: 0.5rem; border: 1px solid #ced4da; border-radius: var(--radius-sm); font-size: 0.9rem; }
    .search-input { flex: 1; min-width: 200px; }
    .filter-select { width: 200px; }
    .empty-state { text-align: center; padding: 2rem; color: #6c757d; }
    .empty-state i { font-size: 2rem; margin-bottom: 0.5rem; }
    .action-section { display: flex; justify-content: flex-end; }
    .action-buttons { display: flex; gap: 1rem; }
    .form-sidebar { position: fixed; top: 0; right: -100%; width: 400px; max-width: 90%; height: 100%; background-color: white; box-shadow: -2px 0 10px rgba(0,0,0,0.2); transition: right 0.3s ease; z-index: 1000; padding: 1.5rem; overflow-y: auto; }
    .form-sidebar.active { right: 0; }
    .is-invalid { border-color: var(--danger) !important; }
    .invalid-feedback { color